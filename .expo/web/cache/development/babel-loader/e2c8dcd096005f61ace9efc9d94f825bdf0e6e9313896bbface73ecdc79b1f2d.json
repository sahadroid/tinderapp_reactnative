{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/macbook/Documents/testfullstack/myapp/screens/SplashScreen.js\",\n  _this = this;\nimport React, { useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { useQuery } from 'react-query';\nimport { useRecoilState } from 'recoil';\nimport { userState } from './atoms';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar SplashScreen = function SplashScreen() {\n  var _useQuery = useQuery('userData', fetchUserData),\n    userData = _useQuery.data,\n    isLoading = _useQuery.isLoading,\n    isError = _useQuery.isError;\n  var _useRecoilState = useRecoilState(userState),\n    _useRecoilState2 = _slicedToArray(_useRecoilState, 2),\n    user = _useRecoilState2[0],\n    setUser = _useRecoilState2[1];\n  useEffect(function () {\n    if (!isLoading && !isError && userData) {\n      setUser(userData);\n    }\n  }, [userData, isLoading, isError]);\n  return _jsxDEV(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: [isLoading && _jsxDEV(Text, {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 21\n    }, _this), isError && _jsxDEV(Text, {\n      children: \"Error: Failed to load user data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 19\n    }, _this), user && _jsxDEV(Text, {\n      children: [\"Welcome, \", user.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, _this);\n};\nexport default SplashScreen;\nvar fetchUserData = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      var response = yield fetch('https://api.example.com/user');\n      if (!response.ok) {\n        throw new Error('Failed to fetch user data');\n      }\n      return response.json();\n    } catch (error) {\n      throw new Error('Failed to fetch user data');\n    }\n  });\n  return function fetchUserData() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["React","useEffect","View","Text","Image","useQuery","useRecoilState","userState","jsxDEV","_jsxDEV","SplashScreen","_useQuery","fetchUserData","userData","data","isLoading","isError","_useRecoilState","_useRecoilState2","_slicedToArray","user","setUser","style","flex","justifyContent","alignItems","children","fileName","_jsxFileName","lineNumber","columnNumber","_this","name","_ref","_asyncToGenerator","response","fetch","ok","Error","json","error","apply","arguments"],"sources":["/Users/macbook/Documents/testfullstack/myapp/screens/SplashScreen.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { View, Text, Image } from 'react-native';\nimport { useQuery } from 'react-query';\nimport { useRecoilState } from 'recoil';\nimport { userState } from './atoms'; // Define userState atom\n\nconst SplashScreen = () => {\n  const { data: userData, isLoading, isError } = useQuery('userData', fetchUserData);\n  const [user, setUser] = useRecoilState(userState);\n\n  useEffect(() => {\n    if (!isLoading && !isError && userData) {\n      setUser(userData);\n      // Navigate to the main app screen\n    }\n  }, [userData, isLoading, isError]);\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      {isLoading && <Text>Loading...</Text>}\n      {isError && <Text>Error: Failed to load user data</Text>}\n      {user && <Text>Welcome, {user.name}</Text>}\n    </View>\n  );\n};\n\nexport default SplashScreen;\n\n// Function to fetch user data from the server\nconst fetchUserData = async () => {\n  try {\n    const response = await fetch('https://api.example.com/user');\n    if (!response.ok) {\n      throw new Error('Failed to fetch user data');\n    }\n    return response.json();\n  } catch (error) {\n    throw new Error('Failed to fetch user data');\n  }\n};\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,KAAA;AAEzC,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,cAAc,QAAQ,QAAQ;AACvC,SAASC,SAAS,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;EACzB,IAAAC,SAAA,GAA+CN,QAAQ,CAAC,UAAU,EAAEO,aAAa,CAAC;IAApEC,QAAQ,GAAAF,SAAA,CAAdG,IAAI;IAAYC,SAAS,GAAAJ,SAAA,CAATI,SAAS;IAAEC,OAAO,GAAAL,SAAA,CAAPK,OAAO;EAC1C,IAAAC,eAAA,GAAwBX,cAAc,CAACC,SAAS,CAAC;IAAAW,gBAAA,GAAAC,cAAA,CAAAF,eAAA;IAA1CG,IAAI,GAAAF,gBAAA;IAAEG,OAAO,GAAAH,gBAAA;EAEpBjB,SAAS,CAAC,YAAM;IACd,IAAI,CAACc,SAAS,IAAI,CAACC,OAAO,IAAIH,QAAQ,EAAE;MACtCQ,OAAO,CAACR,QAAQ,CAAC;IAEnB;EACF,CAAC,EAAE,CAACA,QAAQ,EAAEE,SAAS,EAAEC,OAAO,CAAC,CAAC;EAElC,OACEP,OAAA,CAACP,IAAI;IAACoB,KAAK,EAAE;MAAEC,IAAI,EAAE,CAAC;MAAEC,cAAc,EAAE,QAAQ;MAAEC,UAAU,EAAE;IAAS,CAAE;IAAAC,QAAA,GACtEX,SAAS,IAAIN,OAAA,CAACN,IAAI;MAAAuB,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KAAM,CAAC,EACpCf,OAAO,IAAIP,OAAA,CAACN,IAAI;MAAAuB,QAAA,EAAC;IAA+B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KAAM,CAAC,EACvDX,IAAI,IAAIX,OAAA,CAACN,IAAI;MAAAuB,QAAA,GAAC,WAAS,EAACN,IAAI,CAACY,IAAI;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KAAO,CAAC;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,GAAAC,KACtC,CAAC;AAEX,CAAC;AAED,eAAerB,YAAY;AAG3B,IAAME,aAAa;EAAA,IAAAqB,IAAA,GAAAC,iBAAA,CAAG,aAAY;IAChC,IAAI;MACF,IAAMC,QAAQ,SAASC,KAAK,CAAC,8BAA8B,CAAC;MAC5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;MAC9C;MACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,MAAM,IAAIF,KAAK,CAAC,2BAA2B,CAAC;IAC9C;EACF,CAAC;EAAA,gBAVK1B,aAAaA,CAAA;IAAA,OAAAqB,IAAA,CAAAQ,KAAA,OAAAC,SAAA;EAAA;AAAA,GAUlB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}