{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/macbook/Documents/testfullstack/myapp/screens/SplashScreen.js\",\n  _this = this;\nimport React, { useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useQuery } from 'react-query';\nimport { useNavigation } from '@react-navigation/native';\nimport { useRecoilState } from 'recoil';\nimport { userState } from '../atoms';\nimport { fetchUserData } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar SplashScreen = function SplashScreen() {\n  var _useQuery = useQuery('userData', fetchUserData),\n    userData = _useQuery.data,\n    isLoading = _useQuery.isLoading,\n    isError = _useQuery.isError;\n  var _useRecoilState = useRecoilState(userState),\n    _useRecoilState2 = _slicedToArray(_useRecoilState, 2),\n    user = _useRecoilState2[0],\n    setUser = _useRecoilState2[1];\n  var navigation = useNavigation();\n  useEffect(function () {\n    if (!isLoading && !isError && userData) {\n      setUser(userData);\n      navigation.navigate('Home');\n    }\n  }, [userData, isLoading, isError]);\n  return _jsxDEV(View, {\n    style: styles.container,\n    children: [_jsxDEV(Image, {\n      source: require('../assets/images/logo.png'),\n      style: styles.logo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, _this), isLoading && _jsxDEV(Text, {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 21\n    }, _this), isError && _jsxDEV(Text, {\n      children: \"Error: Failed to load user data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 19\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, _this);\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff'\n  },\n  logo: {\n    width: 200,\n    height: 200,\n    marginBottom: 20\n  }\n});\nexport default SplashScreen;","map":{"version":3,"names":["React","useEffect","View","Text","Image","StyleSheet","useQuery","useNavigation","useRecoilState","userState","fetchUserData","jsxDEV","_jsxDEV","SplashScreen","_useQuery","userData","data","isLoading","isError","_useRecoilState","_useRecoilState2","_slicedToArray","user","setUser","navigation","navigate","style","styles","container","children","source","require","logo","fileName","_jsxFileName","lineNumber","columnNumber","_this","create","flex","justifyContent","alignItems","backgroundColor","width","height","marginBottom"],"sources":["/Users/macbook/Documents/testfullstack/myapp/screens/SplashScreen.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { View, Text, Image, StyleSheet } from 'react-native';\nimport { useQuery } from 'react-query';\nimport { useNavigation } from '@react-navigation/native';\nimport { useRecoilState } from 'recoil';\nimport { userState } from '../atoms';\nimport { fetchUserData } from '../services/api';\n\nconst SplashScreen = () => {\n  const { data: userData, isLoading, isError } = useQuery('userData', fetchUserData);\n  const [user, setUser] = useRecoilState(userState);\n  const navigation = useNavigation();\n\n  useEffect(() => {\n    if (!isLoading && !isError && userData) {\n      setUser(userData);\n      navigation.navigate('Home'); // Navigate to the main app screen\n    }\n  }, [userData, isLoading, isError]);\n\n  return (\n    <View style={styles.container}>\n      <Image source={require('../assets/images/logo.png')} style={styles.logo} />\n      {isLoading && <Text>Loading...</Text>}\n      {isError && <Text>Error: Failed to load user data</Text>}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff',\n  },\n  logo: {\n    width: 200,\n    height: 200,\n    marginBottom: 20,\n  },\n});\n\nexport default SplashScreen;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,UAAA;AAEzC,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,aAAa,QAAQ,0BAA0B;AACxD,SAASC,cAAc,QAAQ,QAAQ;AACvC,SAASC,SAAS,QAAQ,UAAU;AACpC,SAASC,aAAa,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;EACzB,IAAAC,SAAA,GAA+CR,QAAQ,CAAC,UAAU,EAAEI,aAAa,CAAC;IAApEK,QAAQ,GAAAD,SAAA,CAAdE,IAAI;IAAYC,SAAS,GAAAH,SAAA,CAATG,SAAS;IAAEC,OAAO,GAAAJ,SAAA,CAAPI,OAAO;EAC1C,IAAAC,eAAA,GAAwBX,cAAc,CAACC,SAAS,CAAC;IAAAW,gBAAA,GAAAC,cAAA,CAAAF,eAAA;IAA1CG,IAAI,GAAAF,gBAAA;IAAEG,OAAO,GAAAH,gBAAA;EACpB,IAAMI,UAAU,GAAGjB,aAAa,CAAC,CAAC;EAElCN,SAAS,CAAC,YAAM;IACd,IAAI,CAACgB,SAAS,IAAI,CAACC,OAAO,IAAIH,QAAQ,EAAE;MACtCQ,OAAO,CAACR,QAAQ,CAAC;MACjBS,UAAU,CAACC,QAAQ,CAAC,MAAM,CAAC;IAC7B;EACF,CAAC,EAAE,CAACV,QAAQ,EAAEE,SAAS,EAAEC,OAAO,CAAC,CAAC;EAElC,OACEN,OAAA,CAACV,IAAI;IAACwB,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5BjB,OAAA,CAACR,KAAK;MAAC0B,MAAM,EAAEC,OAAO,CAAC,2BAA2B,CAAE;MAACL,KAAK,EAAEC,MAAM,CAACK;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KAAE,CAAC,EAC1EpB,SAAS,IAAIL,OAAA,CAACT,IAAI;MAAA0B,QAAA,EAAC;IAAU;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KAAM,CAAC,EACpCnB,OAAO,IAAIN,OAAA,CAACT,IAAI;MAAA0B,QAAA,EAAC;IAA+B;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,GAAAC,KAAM,CAAC;EAAA;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,GAAAC,KACpD,CAAC;AAEX,CAAC;AAED,IAAMV,MAAM,GAAGtB,UAAU,CAACiC,MAAM,CAAC;EAC/BV,SAAS,EAAE;IACTW,IAAI,EAAE,CAAC;IACPC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE,QAAQ;IACpBC,eAAe,EAAE;EACnB,CAAC;EACDV,IAAI,EAAE;IACJW,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,GAAG;IACXC,YAAY,EAAE;EAChB;AACF,CAAC,CAAC;AAEF,eAAehC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}